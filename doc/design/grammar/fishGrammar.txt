Grammar : As we are using Top-down parsing approach our grammar must be unambiguous, so we eliminated left recursion and added precedence among operators. The grammar is as follows:
program			->  mainBlock
mainBlock		->  startFISH block endFish | startFISH block endFish functionalBlock
block			-> declaration statements
			| statements
functionalBlock		-> functionalHelpBlock functionalBlock
			|  functionalHelpBlock 
functionalHelpBlock 	-> fun functionName(parameters): block endfun
parameters 		->  parametersHelp, parameters
			|   parametersHelp
parametersHelp 	-> $identifier
declaration 		->  declarationHelp , declaration
			|   declarationHelp
declarationHelp	 	-> $identifier
			 |   $identifier = number
		 	 |   $identifier = boolean
statements		->  statementsHelp statements
			|   statementsHelp
statementsHelp	 	->  assignmentStatement
			|    ifStatement
			|    loopStatement
			|    functionCall
			|    writeStatement
			|    returnStatement
assignmentStatement 	-> identifier = expression
			| identifier = boolean
ifStatement		->  if (booleanExpression) : block else : block endif
loopStatement		->  loop (booleanExpression) : block endloop
functionCall		->  identifier = functionName(arguments)
			|   functionName(arguments)
arguments 		-> argumentsHelp , arguments
		 	| argumentsHelp
argumentsHelp  		-> expression
			| boolean
writeStatement 		->  write expression
returnStatement		->  return expression
			|    return booleanExpression
booleanExpression	->  expression == expression
		 	|    expression >= expression
		 	|    expression <= expression
  		 	|    expression != expression
		 	|    expression > expression
		 	|    expression < expression
			|    boolean
expression 		->  term  + expression 
			|    term - expression 
			|    term
term 	        	->  factor *  term  
		 	|  factor / term 
		 	|  factor % term
		 	|  factor
factor			->  (expression)
			|   identifier
			|   number
boolean			->  true
			|    false	
number			->   [-]?[0-9]+
identifier		->   [a-z]+
functionName		->   [#][a-z]+
