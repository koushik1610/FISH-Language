Grammar : As we are using Top-down parsing approach our grammar must be unambiguous, so we eliminated left recursion and added precedence among operators. The grammar is as follows:
program			->  mainBlock | mainBlock functions
mainBlock		->  startFISH statements endFish | startFISH statements endFish functionalBlock
statements		-> statements
			| declaration statements
functions		-> functionalHelpBlock 
			|  functionalHelpBlock functions
functionalHelpBlock 	-> fun functionName(parameters): statements endfun
parameters 		->  parametersHelp
			|   parametersHelp, parameters
parametersHelp 		-> $identifier
declaration 		->  declarationHelp
			|   declarationHelp declaration
declarationHelp	 	-> $identifier
			 |   $identifier = number
		 	 |   $identifier = boolean
statements		->  statementsHelp 
			|   statementsHelp statements
statementsHelp	 	->  assignmentStatement
			|    ifStatement
			|    loopStatement
			|    functionCallStatement
			|    writeStatement
			|    readStatement
			|    returnStatement
assignmentStatement 	-> identifier = expression
ifStatement		-> if (booleanExpression) : statements endif
			| if (booleanExpression) : statements else : statements endif
loopStatement		->  loop (booleanExpression) : statements endloop
functionCallStatement	->  funcName (arguments)
arguments 		-> argumentsHelp 
		 	| argumentsHelp, arguments
argumentsHelp  		-> expression
readStatement		-> read identifier
writeStatement 		->  write expression
			|   write string
			|   write booleanExpression
returnStatement		->  return expression
booleanExpression	->  boolean
			|    expression == expression
		 	|    expression >= expression
		 	|    expression <= expression
  		 	|    expression != expression
		 	|    expression > expression
		 	|    expression < expression
			|    expression && expression
			|    expression || expression  
expression 		->  expressionHelp 
			|    expressionHelp + expression 
			|    expressionHelp - expression 
expressionHelp 	       	->  factor  
		 	|  factor * expressionHelp
		 	|  factor / expressionHelp
		 	|  factor %  expressionHelp
factor			->  (expression)
			|   identifier
			|   number
			|   real
			|   string
boolean			->  True
			|   False	
number			->   [-]?[0-9]+
identifier		->   [a-z]+
functionName		->   [A-Z]+
real 			->   [-]?[0-9]+[.][0-9]+
string			->   ["][ a-zA-Z:=><+*/%!\-]+["]
