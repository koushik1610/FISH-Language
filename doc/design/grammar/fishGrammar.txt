Grammar Description:
	This section depicts the brief rules involved in our grammar and additional details in context of grammar.
	Identifiers 		  : can be named starting with a optional underscore (_) followed by sequence of small 	letters
	Arithmetic Operations : Addition(+), Subtraction(-), Multiplication(*), Division(/) and Modulus(%)
	Numbers 			  : These are integers (both positive and negative).
	Statements 			  : Our grammar holds an assigment Statement (with operator '='),
							If-else statement (conditional block), 
							loop statement (with two versions: 1. Iterates a counter in given range of numbers 2. Iterates till associated Boolean expression becomes 'false')
	Boolean				  :	grammar includes atomic values "true","false" and Boolean Expression (with operator '==')				
	The grammar was refined form obtained after removing 'leftRecursion' and including 'Precedence' among operators.  
Grammar : 
	This section shows the Unambiguous Grammar for our programming language FISH.

grammar Fish;
program 		: block;
block      		: 'startFISH' declaration statements 'endFISH';
declaration 		: declarationHelp declaration
			| declarationHelp;
declarationHelp 	: '$' IDENTIFIER;
statements 		: statementsHelp statements 
			| statementsHelp;
statementsHelp		: IDENTIFIER '=' expression 
			| 'if' '(' boolExpression ')' ':' statements 'else' ':' statements 'endif' 
			| 'loop' IDENTIFIER 'from' NUMBER 'to' NUMBER ':' statements 'endloop' 
			| 'loop' '(' boolExpression ')' ':' statements 'endloop';
boolExpression 		: 'true' 
			| 'false' 
			| expression '==' expression;

expression 		: term  '+' expression 
			| term '-' expression 
			| term;
term 	        	: factor '*'  term  
			| factor '/' term 
			| factor '%' term
			| factor;

factor     		: NUMBER
			| IDENTIFIER;

IDENTIFIER		: [a-z]+;
NUMBER	 		: [-]?[0-9]+;

NEWLINE			: ('\r'|'\n'|' '|'\t') -> skip;
