Grammar Description:
	This section depicts the brief rules involved in our grammar and additional details in context of grammar.
	Identifiers 		  : can be named starting with a optional underscore (_) followed by sequence of small 	letters
	Arithmetic Operations : Addition(+), Subtraction(-), Multiplication(*), Division(/) and Modulus(%)
	Numbers 			  : These are integers (both positive and negative).
	Statements 			  : Our grammar holds an assigment Statement (with operator '='),
							If-else statement (conditional block), 
							loop statement (with two versions: 1. Iterates a counter in given range of numbers 2. Iterates till associated Boolean expression becomes 'false')
	Boolean				  :	grammar includes atomic values "true","false" and Boolean Expression (with operator '==')				
	The grammar was refined form obtained after removing 'leftRecursion' and including 'Precedence' among operators.  
Grammar : 
	This section shows the Unambiguous Grammar for our programming language FISH.

Program 		-> Block
Block      		-> ‘startFISH’ Declaration; Statements ‘endFISH’
Declaration 	-> DeclarationHelp ‘;’ Declaration ‘;’ | DeclarationHelp
DeclarationHelp -> ‘$’ Identifier
Statements 		-> StatementsHelp ‘;’ Statements ';'| StatementsHelp
StatementsHelp	-> Identifier ‘=’ Expression |
            	   ‘If’ ‘(‘ Boolexpression ‘)’ ‘:’ Statements ‘else’ ‘:’Statements ‘endif’ ‘;’ | 
            	   ‘loop’ Identifier Number ‘to’   Number ‘:’ Statements ‘endloop’ |
            	   'loop' BoolExpression 'do' ':' Statements 'endloop'

Boolexpression 	-> ‘true’ | ‘false’ | Expression ‘==’ Expression
Expression 		-> Term  ‘+’ Expression | Term ‘-’ Expression | Term
Term         	-> Factor ‘*’  Term  | Factor ‘/’ Term | Factor ‘%’ Term| Factor
Factor     		-> Number | Identifier
Number 			-> [-]?[0-9]+
Identifier 		-> [_]?[a-z]+
